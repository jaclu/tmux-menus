#!/bin/sh
# Always sourced file - Fake bang path to help editors
#
#   Copyright (c) 2022-2025: Jacob.Lundqvist@gmail.com
#   License: MIT
#
#   Part of https://github.com/jaclu/tmux-menus
#
#  Cache related stuff
#
# shellcheck disable=SC2034,SC2154

#---------------------------------------------------------------
#
#   cache handling
#
#---------------------------------------------------------------

cache_create_folder() {
    $cfg_use_cache || error_msg "cache_create_folder() - called when cache is disabled"
    [ -z "$d_cache" ] && {
        error_msg "variable d_cache undefined"
    }
    [ -d "$d_cache" ] && return 0 # already created

    # log_it "cache_create_folder() - $1  folder: $d_cache"
    mkdir -p "$d_cache" || {
        error_msg "Failed to create cache folder: $d_cache"
        # Disabling cache
        cfg_use_cache=false
        d_cache=""
    }
}

cache_clear() {
    #
    #  Clear cache related files, since this only removes files if found
    #  it can be called also when cache is disabled.
    #

    log_it "cache_clear() $1"
    $cfg_use_cache || error_msg "cache_clear() - called when not using cache"
    [ -z "$d_cache" ] && error_msg "cache_clear() - called when d_cache is undefined"

    safe_remove "$d_cache"
    cache_prepare

    # might as well do it now, to save processing time on next call
    cache_save_options_defined_in_tmux

    # Invalidate what might have already been sourced
    cached_ok_tmux_versions=""
    cached_bad_tmux_versions=""
}

cache_prepare() {
    #
    #  Make sure cache folder exists, call this before any cache write
    #
    #  returns 0 if cache folder exists / was created
    #
    # log_it "cache_prepare()"
    $cfg_use_cache || error_msg "cache_prepare() - called when not using cache"

    cache_create_folder "cache_prepare()"
    return 0
}

cache_add_ok_vers() {
    #
    #  Add param to list of good versions (<=running tmux vers),
    #  if it wasn't cached already
    #
    $cfg_use_cache || return 0
    # log_it "cache_add_ok_vers($1)"
    [ -z "$1" ] && error_msg "cache_add_ok_vers() - no param"

    case "$cached_ok_tmux_versions" in
    *"$1 "*) ;;
    *)
        cached_ok_tmux_versions="${cached_ok_tmux_versions}$1 "
        # log_it "Adding ok tmux vers: $1"
        cache_save_known_tmux_versions
        ;;
    esac
    return 0
}

cache_add_bad_vers() {
    #
    #  Add param to list of bad versions (>running tmux vers),
    #  if it wasn't cached already
    #
    # log_it "cache_add_bad_vers($1)"
    $cfg_use_cache || return 1
    [ -z "$1" ] && error_msg "cache_add_bad_vers() - no param"

    case "$cached_bad_tmux_versions" in
    *"$1"*) ;;
    *)
        cached_bad_tmux_versions="${cached_bad_tmux_versions}$1 "
        # log_it "Adding bad tmux vers: $1"
        cache_save_known_tmux_versions
        ;;
    esac
    return 1
}

cache_save_known_tmux_versions() { # tmux stuff
    #
    #  The order the versions are saved doesn't matter,
    #  since they are checked with a case to speed things up
    #
    $cfg_use_cache || {
        error_msg "cache_save_known_tmux_versions() - called when not using cache"
    }
    [ -d "$d_cache" ] || {
        log_it "WARNING: cache_save_known_tmux_versions() aborting, no cache folder: $d_cache"
        return 1
    }

    cache_prepare
    #region known tmux versions
    printf '%s\n' "\
#!/bin/sh
# Autogenerated always sourced file - Fake bang path to help editors/linters

#
#  This is a list of known good/bad tmux versions, to speed up version checks
#
cached_ok_tmux_versions=\"$cached_ok_tmux_versions\"
cached_bad_tmux_versions=\"$cached_bad_tmux_versions\"" >"$f_cache_known_tmux_vers" || {
        error_msg "Failed to save known versions: $f_cache_known_tmux_vers"
    }
    #endregion
    return 0
}

cache_escape_special_chars() {
    # Escape backslashes, backticks, double quotes, and dollar signs
    printf '%s\n' "$1" | sed 's/[\\`"$]/\\&/g'
}

cache_param_write() {
    #
    #  Writes all config params to file
    #  if it differed with previous params, clear cache
    #
    # log_it "cache_param_write()"

    $cfg_use_cache || error_msg "cache_param_write() - called when not using cache"

    cache_prepare

    # need to be in repo base dir for the git chcecks below
    cd "$D_TM_BASE_PATH" || error_msg "Failed to cd into $D_TM_BASE_PATH"

    #
    # Log last repo change and if & when latest local changes were done
    # to ensure any code changes will trigger a cache reset
    #

    # Timestamp for latest change of repo that hs been pulled
    repo_last_changed="$(git log -1 --format="%ad" --date=iso 2>/dev/null)"

    # Timestamp and file name for latest locally changed file
    # will be "" if no local edits have been done
    # the xargs stderr redirect is to avoid errors about removed files
    if [ "$(uname -s)" = "Darwin" ]; then
        last_local_edit="$(git ls-files -m 2>/dev/null |
            xargs -r stat -f '%m %N' 2>/dev/null | sort -nr | head -1)"
    else
        last_local_edit="$(git ls-files -m 2>/dev/null |
            xargs -r stat -c '%Y %n' 2>/dev/null | sort -nr | head -1)"
    fi

    _f_params_tmp=$(mktemp) || error_msg "Failed to create tmp config file"

    # ensure no cfg variables are from a previous cache
    plugin_options_have_been_read=false # allow for it to be read again
    [ "$cfg_log_file_forced" != 1 ] && {
        # log_it "><> not forced, disabling logfile"
        cfg_log_file=""
    }
    tmux_get_plugin_options

    # create empty log line indicating startup
    [ "$cfg_log_file_forced" != 1 ] && [ -n "$cfg_log_file" ] && log_it

    # profiling_display "[cache] will write: $_f_params_tmp"
    #region param cache file
    printf '%s\n' "\
#!/bin/sh
# Autogenerated always sourced file - Fake bang path to help editors/linters

#  This is a cache of configs for the plugin.
#  By sourcing this instead of gathering it each time, tons of time
#  is saved.

cfg_trigger_key=\"$(cache_escape_special_chars "$cfg_trigger_key")\"
cfg_no_prefix=\"$cfg_no_prefix\"

cfg_use_cache=\"$cfg_use_cache\"
cfg_use_hint_overlays=\"$cfg_use_hint_overlays\"
cfg_show_key_hints=\"$cfg_show_key_hints\"

cfg_use_whiptail=\"$cfg_use_whiptail\"
cfg_alt_menu_handler=\"$cfg_alt_menu_handler\"

cfg_nav_next=\"$(cache_escape_special_chars "$cfg_nav_next")\"
cfg_nav_prev=\"$(cache_escape_special_chars "$cfg_nav_prev")\"
cfg_nav_home=\"$(cache_escape_special_chars "$cfg_nav_home")\"

cfg_format_title=\"$(cache_escape_special_chars "$cfg_format_title")\"
cfg_simple_style=\"$(cache_escape_special_chars "$cfg_simple_style")\"
cfg_simple_style_border=\"$(cache_escape_special_chars "$cfg_simple_style_border")\"
cfg_simple_style_selected=\"$(cache_escape_special_chars "$cfg_simple_style_selected")\"

cfg_mnu_loc_x=\"$cfg_mnu_loc_x\"
cfg_mnu_loc_y=\"$cfg_mnu_loc_y\"

cfg_tmux_conf=\"$cfg_tmux_conf\"
cfg_log_file=\"$cfg_log_file\"

cfg_use_notes=\"$cfg_use_notes\"

current_tmux_vers=\"$current_tmux_vers\"
current_tmux_vers_i=\"$current_tmux_vers_i\"
current_tmux_vers_suffix=\"$current_tmux_vers_suffix\"

#
# Get time stamps for repo and local file changes,
# This ensures cache is cleared any time the code has changed.
#
repo_last_changed=\"$repo_last_changed\"
last_local_edit=\"$last_local_edit\"" >"$_f_params_tmp"
    #endregion
    min_display_t_append_to_params "$_f_params_tmp"
    # profiling_display "[cache] write $_f_params_tmp - done"

    if [ ! -f "$f_cache_params" ]; then
        log_it "  cache_param_write() - Creating: $f_cache_params"
        cache_clear "No $f_cache_params found"
        mv "$_f_params_tmp" "$f_cache_params"
    elif ! diff -q "$_f_params_tmp" "$f_cache_params" >/dev/null 2>&1; then
        # diff reports success if files don't fiffer, hence the !
        # If any params have changed, invalidate cache
        # log_it "  cache_param_write() - Config changed - clear cache"
        # error_msg "><> _f_params_tmp [$_f_params_tmp] differs"
        cache_clear "Environment changed:  $(diff "$_f_params_tmp" "$f_cache_params")"
        mv "$_f_params_tmp" "$f_cache_params"
    else
        safe_remove "$_f_params_tmp" skip-path-check # no changes
        # ensure time stamp is updated for tmux.conf age comparisons
        touch "$f_cache_params"
    fi
    unset _f_params_tmp # since its gone, ensure nothing tries to reference it
    return 0            # cache was or is now valid
}

# cache_update_param_cache()
cache_config_get_save() {
    #
    # Reads plugin options from tmux and save the param cache, unless
    # cfg_use_cache is false
    # returns true if cache was written, otherwise false
    #
    # log_it "cache_config_get_save()"

    tmux_get_plugin_options # ensure env is retrieved

    if [ ! -f "$f_no_cache_hint" ] && $cfg_use_cache; then
        # will read plugin options again to ensure changes are preserved
        cache_param_write
        return 0
    else
        # log_it "  cache_config_get_save() - didn't save due to:"
        # [ -f "$f_no_cache_hint" ] && log_it "  presence of f_no_cache_hint [$f_no_cache_hint]"
        # $cfg_use_cache || log_it "  cfg_use_cache: $cfg_use_cache"
        return 1
    fi
}

#===============================================================
#
#   Main
#
#===============================================================

# log_it "===  Completed: scripts/utils/cache.sh  =="
